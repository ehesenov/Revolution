{"version":3,"file":"HandwritingTextareaCanvas.js","sourceRoot":"","sources":["../../src/HandwritingTextareaCanvas.ts"],"names":[],"mappings":"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","sourcesContent":["import { css, html, LitElement } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { AnimationHelper } from './AnimationHelper.js';\nimport { RecognizeEvent } from './RecognizeEvent.js';\nimport { RequestAnimationDataEvent } from './RequestAnimationDataEvent.js';\n\n/* global HandwritingDrawing, HandwritingRecognizer, HandwritingStroke */\n\nconst RECOGNITION_TIMEOUT_IN_MS = 1_000;\n\nexport class HandwritingTextareaCanvas extends LitElement {\n  static readonly styles = css`\n    canvas {\n      box-sizing: border-box;\n      width: 100%;\n      height: 100%;\n      border: 1px solid dimgray;\n      touch-action: none;\n\n      background-color: rgba(255 255 255 / 0.5);\n      backdrop-filter: blur(3px);\n    }\n\n    handwriting-textarea-button {\n      position: absolute;\n      bottom: 10px;\n      right: 10px;\n      background-color: #4caf50;\n    }\n\n    handwriting-textarea-button:hover {\n      background-color: #66bb6a;\n    }\n  `;\n\n  #ctx?: CanvasRenderingContext2D;\n\n  #recognizer?: HandwritingRecognizer;\n\n  #drawing?: HandwritingDrawing;\n\n  #activeOperation?: {\n    stroke: HandwritingStroke;\n    startTime: number;\n    pointerId: number;\n  };\n\n  #recognitionTimeoutHandle?: number;\n\n  #resizeObserver?: ResizeObserver;\n\n  #animationHelper = new AnimationHelper();\n\n  @query('canvas') canvas?: HTMLCanvasElement;\n\n  @property({ type: String }) languages?: string;\n\n  @property({ type: String }) textContext?: string;\n\n  @property({ type: String }) recognitionType?: string;\n\n  firstUpdated() {\n    // Resize the canvas when the textarea size changes\n    this.#resizeObserver = new ResizeObserver(() => this.__initializeCanvas());\n    this.#resizeObserver.observe(this);\n  }\n\n  private __initializeCanvas() {\n    if (!this.canvas) {\n      throw new Error('Unable to find canvas.');\n    }\n\n    // assign canvas's width & height for high-DPI screens\n    const clientRect = this.canvas.getBoundingClientRect();\n    this.canvas.width = clientRect.width * window.devicePixelRatio;\n    this.canvas.height = clientRect.height * window.devicePixelRatio;\n\n    // after canvas resize, all state is lost, so we re-create the context\n    // use desynchronized context for performant drawing\n    const ctx = this.canvas.getContext('2d', { desynchronized: true });\n    if (!ctx) {\n      throw new Error('Unable to retrieve 2D context.');\n    }\n\n    // initialize pointer style\n    ctx.strokeStyle = 'black';\n    ctx.lineCap = 'round';\n    ctx.lineWidth = 2;\n\n    // map canvas pixels to match pointer pixels\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n\n    this.#ctx = ctx;\n  }\n\n  private __onPointerDown(event: PointerEvent) {\n    event.preventDefault();\n\n    if (this.#activeOperation) {\n      // Only support one pointer at a time\n      return;\n    }\n\n    if (!this.#recognizer) {\n      // The recognizer is only created once in the lifetime of this component.\n      // We need to create it here to get access of the pointer type to pass\n      // it as a hint to the recognizer.\n      this.__setUpRecognizer(event.pointerType);\n    }\n\n    this.#activeOperation = {\n      stroke: new HandwritingStroke(),\n      // store startTime as a reference point for subsequent events\n      startTime: Date.now(),\n      // store ID to recognize the pointer during pointermove & pointerup\n      pointerId: event.pointerId,\n    };\n\n    this.__addPoint(event.offsetX, event.offsetY);\n    this.#ctx?.moveTo(event.offsetX, event.offsetY);\n\n    // Clear any previous recognition timeout, canvas won't disappear anymore\n    this.__clearRecognitionTimeout();\n  }\n\n  private async __setUpRecognizer(pointerType: string): Promise<void> {\n    if (typeof navigator.createHandwritingRecognizer === 'undefined') {\n      throw new Error(\n        'Handwriting Recognizer API is not supported on this platform.'\n      );\n    }\n\n    this.#recognizer = await navigator.createHandwritingRecognizer({\n      languages: this.languages?.split(',') ?? [],\n    });\n\n    // Make sure the pointerType matches the allowed values for recognitionType\n    const allowedTypes = ['mouse', 'pen', 'touch'] as const;\n    const inputType = allowedTypes.find(type => type === pointerType);\n\n    this.#drawing = this.#recognizer.startDrawing({\n      inputType,\n      textContext: this.textContext,\n      recognitionType: this.recognitionType,\n      alternatives: 0,\n    });\n  }\n\n  private __onPointerMove(event: PointerEvent) {\n    if (this.#activeOperation?.pointerId === event.pointerId) {\n      this.__addPoint(event.offsetX, event.offsetY);\n      this.#ctx?.lineTo(event.offsetX, event.offsetY);\n\n      this.#ctx?.stroke();\n    }\n  }\n\n  private __addPoint(x: number, y: number) {\n    this.#activeOperation?.stroke.addPoint({\n      x,\n      y,\n      t: Date.now() - this.#activeOperation.startTime,\n    });\n  }\n\n  private __onPointerUp(event: PointerEvent) {\n    if (this.#drawing && this.#activeOperation?.pointerId === event.pointerId) {\n      this.#drawing.addStroke(this.#activeOperation.stroke);\n      this.#activeOperation = undefined;\n\n      // Set a timeout for recognizing the text and hiding the canvas\n      this.__setRecognitionTimeout();\n    }\n  }\n\n  private __setRecognitionTimeout() {\n    this.__clearRecognitionTimeout();\n    this.#recognitionTimeoutHandle = window.setTimeout(\n      () => this.__predictAndSendEvent(),\n      RECOGNITION_TIMEOUT_IN_MS\n    );\n  }\n\n  private __clearRecognitionTimeout() {\n    if (this.#recognitionTimeoutHandle) {\n      window.clearTimeout(this.#recognitionTimeoutHandle);\n    }\n  }\n\n  private async __predictAndSendEvent() {\n    const [prediction] = (await this.#drawing?.getPrediction()) ?? [];\n    if (prediction && this.#drawing && this.#ctx) {\n      // request animation data from the textarea\n      const requestAnimationDataEvent = new RequestAnimationDataEvent();\n      this.dispatchEvent(requestAnimationDataEvent);\n\n      // play the recognition animation\n      await this.#animationHelper.animate(\n        this.textContext ?? '',\n        prediction,\n        this.#drawing,\n        this.#ctx,\n        requestAnimationDataEvent.data\n      );\n\n      this.dispatchEvent(new RecognizeEvent(prediction?.text ?? ''));\n    } else {\n      this.dispatchEvent(new RecognizeEvent(''));\n    }\n  }\n\n  render() {\n    return html`\n      <canvas\n        @pointerdown=\"${(event: PointerEvent) => this.__onPointerDown(event)}\"\n        @pointermove=\"${(event: PointerEvent) => this.__onPointerMove(event)}\"\n        @pointerup=\"${(event: PointerEvent) => this.__onPointerUp(event)}\"\n      ></canvas>\n      <handwriting-textarea-button\n        @click=\"${() => this.__predictAndSendEvent()}\"\n        >✓\n      </handwriting-textarea-button>\n    `;\n  }\n\n  disconnectedCallback() {\n    this.#resizeObserver?.disconnect();\n    super.disconnectedCallback();\n  }\n}\n"]}