{"version":3,"file":"HandwritingTextarea.js","sourceRoot":"","sources":["../../src/HandwritingTextarea.ts"],"names":[],"mappings":"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","sourcesContent":["import { css, html, LitElement } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { RecognizeEvent } from './RecognizeEvent.js';\nimport { RequestAnimationDataEvent } from './RequestAnimationDataEvent.js';\n\nexport class HandwritingTextarea extends LitElement {\n  static get styles() {\n    return css`\n      :host {\n        display: inline-block;\n      }\n\n      .wrapper {\n        display: grid;\n        position: relative;\n        height: 100%;\n      }\n\n      textarea {\n        resize: none;\n      }\n\n      handwriting-textarea-button {\n        position: absolute;\n        bottom: 10px;\n        right: 10px;\n        transform: scale(-1, 1);\n      }\n\n      handwriting-textarea-canvas {\n        position: absolute;\n        height: 100%;\n        width: 100%;\n        z-index: 1;\n      }\n    `;\n  }\n\n  @property({ type: String }) languages = 'en';\n\n  @property({ type: String }) recognitionType = 'text';\n\n  @property({ type: String }) value = '';\n\n  @state() supported = false;\n\n  @state() enabled = false;\n\n  @state() textContext = '';\n\n  @query('textarea') textarea?: HTMLTextAreaElement;\n\n  #hadFocus = false;\n\n  async connectedCallback() {\n    super.connectedCallback();\n\n    this.supported = await this.__isHandwritingRecognitionSupported();\n  }\n\n  private async __isHandwritingRecognitionSupported() {\n    if (typeof navigator.queryHandwritingRecognizerSupport === 'undefined') {\n      // API is not available on this platform\n      return false;\n    }\n\n    const result = await navigator.queryHandwritingRecognizerSupport({\n      languages: this.languages.split(','),\n      alternatives: 0,\n    });\n\n    if (!result.languages || !result.alternatives) {\n      // Handwriting features are not supported. Behave as if API would not be available.\n      return false;\n    }\n\n    // At this point, both the Handwriting Recognition API and our constraints are supported.\n    return true;\n  }\n\n  private __onRecognize(event: RecognizeEvent) {\n    if (this.textarea) {\n      // Replace the selected text with the recognized text\n      const { before, after } = this.__splitTextAtSelection();\n      this.textarea.value = `${before}${event.detail.text}${after}`;\n\n      this.__toggleCanvas();\n    }\n  }\n\n  private __splitTextAtSelection(): { before: string; after: string } {\n    const text = this.textarea?.value ?? '';\n    const { start, end } = this.__getSelection();\n    return { before: text.substr(0, start), after: text.substr(end) };\n  }\n\n  private __getSelection(): { start: number; end: number } {\n    if (!this.#hadFocus) {\n      // if the textarea never had focus, we assume that the user wants to add\n      // text add the end (selectionStart and selectionEnd would be 0)\n      const length = this.textarea?.value.length ?? 0;\n      return { start: length, end: length };\n    }\n\n    return {\n      start: this.textarea?.selectionStart ?? 0,\n      end: this.textarea?.selectionEnd ?? 0,\n    };\n  }\n\n  private __toggleCanvas() {\n    this.enabled = this.supported && !this.enabled;\n    if (this.enabled) {\n      // Set the text before the selection as the context for recognition\n      this.textContext = this.__splitTextAtSelection().before;\n    }\n  }\n\n  private __setFocus() {\n    this.#hadFocus = true;\n  }\n\n  private __setValue(event: Event) {\n    this.value = (event.target as HTMLInputElement)?.value;\n  }\n\n  private __onRequestAnimationData(event: RequestAnimationDataEvent) {\n    if (!this.textarea) {\n      throw new Error('Unable to find textarea');\n    }\n\n    const { padding, fontSize } = window.getComputedStyle(this.textarea);\n    event.setAnimationData({\n      width: this.textarea.getBoundingClientRect().width,\n      padding: parseInt(padding, 10),\n      scrollTop: this.textarea.scrollTop,\n      fontSize,\n    });\n  }\n\n  render() {\n    const drawButton = html`\n      <handwriting-textarea-button @click=\"${() => this.__toggleCanvas()}\"\n        >âœŽ\n      </handwriting-textarea-button>\n    `;\n\n    const canvas = html`\n      <handwriting-textarea-canvas\n        languages=\"${this.languages}\"\n        recognitiontype=\"${this.recognitionType}\"\n        textcontext=\"${this.textContext}\"\n        @recognize=\"${(event: RecognizeEvent) => this.__onRecognize(event)}\"\n        @requestanimationdata=\"${(event: RequestAnimationDataEvent) =>\n          this.__onRequestAnimationData(event)}\"\n      ></handwriting-textarea-canvas>\n    `;\n\n    return html`\n      <div class=\"wrapper\">\n        <textarea\n          .value=\"${this.value}\"\n          @input=\"${(evt: Event) => this.__setValue(evt)}\"\n          @focus=\"${() => this.__setFocus()}\"\n        ></textarea>\n        ${this.supported && !this.enabled ? drawButton : ''}\n        ${this.enabled ? canvas : ''}\n      </div>\n    `;\n  }\n}\n"]}